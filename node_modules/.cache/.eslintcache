[{"/home/troias/udemy/project-3/01-starting-setup/src/index.js":"1","/home/troias/udemy/project-3/01-starting-setup/src/App.tsx":"2","/home/troias/udemy/project-3/01-starting-setup/src/components/Demo/DemoList.js":"3","/home/troias/udemy/project-3/01-starting-setup/src/components/Demo/DemoOutput.js":"4","/home/troias/udemy/project-3/01-starting-setup/src/components/Demo/MyPara.js":"5","/home/troias/udemy/project-3/01-starting-setup/src/components/UI/Button/Button.tsx":"6"},{"size":169,"mtime":1616555800000,"results":"7","hashOfConfig":"8"},{"size":2651,"mtime":1676715474419,"results":"9","hashOfConfig":"8"},{"size":475,"mtime":1626086939890,"results":"10","hashOfConfig":"8"},{"size":298,"mtime":1626086374080,"results":"11","hashOfConfig":"8"},{"size":132,"mtime":1676700332490,"results":"12","hashOfConfig":"8"},{"size":864,"mtime":1676714139760,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"palubn",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"/home/troias/udemy/project-3/01-starting-setup/src/index.js",[],["30","31"],"/home/troias/udemy/project-3/01-starting-setup/src/App.tsx",["32"],"import { useCallback, useMemo, ChangeEvent, useReducer } from \"react\"\nimport Button from \"./components/UI/Button/Button\"\nimport DemoOutput from \"./components/Demo/DemoOutput\"\nimport \"./App.css\"\nimport DemoList from \"./components/Demo/DemoList\"\n\ntype State = number[]\n\ntype Action =\n  | { type: 'ADD_ITEM', payload: number }\n  | { type: 'REMOVE_ITEM', payload: number }\n  | { type: 'SET_INPUT_VALUE', payload: string }\n  | { type: 'RESET_ITEMS', payload: number }\n\ninterface AppState {\n  items: number[],\n  inputValue: string\n}\n\nfunction App() {\n\n  const initialState: AppState = {\n    items: [],\n    inputValue: \"\"\n  }\n\n  const reducer = (state: AppState, action: Action) => {\n    switch (action.type) {\n      case 'ADD_ITEM':\n        return {\n          ...state,\n          items: [...state.items, action.payload]\n        }\n\n      case 'SET_INPUT_VALUE':\n        return {\n          ...state,\n          inputValue: action.payload\n        }\n      case 'RESET_ITEMS':\n        return {\n          ...state,\n          items: []\n        }\n\n      default:\n        return state\n    }\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const inputHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'SET_INPUT_VALUE', payload: event.target.value })\n  }, [])\n\n  const removeItemHander = useCallback(() => {\n    dispatch({ type: 'RESET_ITEMS', payload: 0 })\n\n  }, [\n    dispatch\n\n  ])\n\n  const addItemHandler = useCallback(() => {\n    const inputValueAsNumber = +state.inputValue\n    dispatch({ type: 'ADD_ITEM', payload: inputValueAsNumber })\n  }, [dispatch, state.inputValue])\n\n  console.log(\"App, app running\")\n\n  return (\n    <div className=\"app\">\n      <h1>Starting Application</h1>\n      <DemoList title={\"List\"} items={useMemo(() => state.items, [state.items])} />\n\n      <div>\n        <br />\n        <MyInput\n          label=\"Enter a number\"\n          value={state.inputValue}\n          onChange={inputHandler}\n        />\n        <br />\n        <Button onClick={addItemHandler}\n          type={\"submit\"}\n        >\n          Add Number\n        </Button>\n        <Button type=\"reset\" onClick={removeItemHander}>\n          Reset\n        </Button>\n      </div>\n\n      <DemoOutput items={state.items} />\n    </div>\n  )\n}\n\nexport default App\n\ninterface MyInputProps {\n  label: string\n  value: string\n\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void\n\n}\n\nfunction MyInput({ label, value, onChange }: MyInputProps) {\n  return (\n    <div >\n      <label htmlFor=\"my-input\" className=\"pt-2\">{label}</label>\n      <br />\n\n      <input id=\"my-input\" value={value} onChange={onChange} />\n    </div>\n  )\n}\n","/home/troias/udemy/project-3/01-starting-setup/src/components/Demo/DemoList.js",[],"/home/troias/udemy/project-3/01-starting-setup/src/components/Demo/DemoOutput.js",[],"/home/troias/udemy/project-3/01-starting-setup/src/components/Demo/MyPara.js",[],"/home/troias/udemy/project-3/01-starting-setup/src/components/UI/Button/Button.tsx",["33","34"],"import React from \"react\"\nimport { useState, useCallback } from \"react\"\nimport classes from \"./Button.module.css\"\n\ntype ButtonProps = {\n  onClick: () => void,\n  type?: \"button\" | \"submit\" | \"reset\",\n  className?: string,\n  disabled?: boolean,\n  children: React.ReactNode,\n}\n\nconst Button = ({\n  onClick,\n  type = \"button\",\n  className,\n  disabled,\n  children,\n}: ButtonProps) => {\n  const [allowToggle, setAllowToggle] = useState(false)\n  const [show, setShow] = useState(false)\n\n  const buttonHandler = useCallback(() => {\n    if (allowToggle) {\n      setShow((prevState) => !prevState)\n    }\n    onClick()\n  }, [allowToggle, onClick])\n\n  return (\n    <button\n      type={type}\n      className={`${classes.button} ${className}`}\n      onClick={buttonHandler}\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport default React.memo(Button)\n",["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":7,"column":6,"nodeType":"43","messageId":"44","endLine":7,"endColumn":11},{"ruleId":"41","severity":1,"message":"45","line":20,"column":23,"nodeType":"43","messageId":"44","endLine":20,"endColumn":37},{"ruleId":"41","severity":1,"message":"46","line":21,"column":10,"nodeType":"43","messageId":"44","endLine":21,"endColumn":14},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"@typescript-eslint/no-unused-vars","'State' is defined but never used.","Identifier","unusedVar","'setAllowToggle' is assigned a value but never used.","'show' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]